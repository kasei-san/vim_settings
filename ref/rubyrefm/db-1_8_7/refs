doc,spec/literal,backslash,バックスラッシュ記法
doc,symref,period,.
doc,spec/call,block_arg,ブロックパラメータの挙動
method,Kernel.#lambda,should_use_next,手続きを中断して値を返す
doc,spec/operator,selfassign,自己代入
doc,spec/control,END,END
doc,spec/lambda_proc,orphan,orphan な手続きオブジェクトの挙動
doc,spec/def,method,メソッド定義
method,Kernel.#lambda,block,Proc オブジェクトをブロック付きメソッド呼び出しに使う
doc,spec/control,BEGIN,BEGIN
doc,spec/def,operator,演算子式の定義
doc,spec/control,until,until
doc,spec/control,unless,unless
doc,symref,at,@
doc,spec/literal,here,ヒアドキュメント (行指向文字列リテラル)
doc,spec/def,singleton_method,特異メソッド定義
doc,spec/variables,instance,インスタンス変数
doc,symref,rbra,}
class,Proc,block,Proc オブジェクトをブロック付きメソッド呼び出しに使う
doc,spec/def,nest_method,メソッド定義のネスト
doc,symref,and,&
doc,symref,dq,"
doc,spec/operator,range,範囲式
doc,spec/operator,cond,条件演算子
method,Kernel.#proc,lambda_proc,lambda と proc と Proc.new とイテレータの違い
doc,symref,rangl,>
doc,spec/def,undef,undef
doc,spec/control,for,for
doc,symref,eq,=
doc,spec/def,eval_method,メソッドの評価
doc,spec/literal,num,数値リテラル
doc,symref,hat,^
doc,spec/control,begin,begin
doc,spec/lambda_proc,def,手続きオブジェクトとは
doc,spec/lexical,comment,コメント
doc,spec/operator,and,and
doc,spec/lexical,reserved,予約語
doc,spec/def,limit,呼び出し制限
doc,spec/call,block,ブロック付きメソッド呼び出し
doc,spec/variables,global,グローバル変数
doc,symref,langl,<
doc,symref,per,%
doc,spec/control,redo,redo
doc,spec/literal,range,範囲オブジェクト
doc,spec/operator,assign,代入
doc,symref,sq,'
class,String,mutable,破壊的な変更
doc,spec/def,class_method,クラスメソッドの定義
doc,spec/operator,not,not
doc,spec/variables,local,ローカル変数
doc,spec/regexp,regexp,正規表現記号
doc,spec/variables,const,定数
class,Proc,lambda_proc,lambda と proc と Proc.new とイテレータの違い
method,Kernel.#proc,should_use_next,手続きを中断して値を返す
doc,spec/lexical,embed,埋め込みドキュメント
class,String,multi,マルチバイト文字列の処理
doc,spec/rubycmd,shebang,インタプリタ行の解釈
doc,symref,minus,-
doc,symref,lbra,{
doc,spec/literal,exp,式展開
doc,symref,ac,`
doc,spec/control,retry,retry
doc,symref,lbra2,[
doc,spec/regexp,string,文字クラス
doc,symref,lbra3,(
doc,spec/variables,class,クラス変数
doc,spec/control,raise,raise
doc,spec/call,yield,yield
doc,spec/literal,percent,%記法
doc,spec/literal,array,配列式
doc,spec/literal,regexp,正規表現リテラル
doc,symref,plus,+
doc,spec/control,break,break
doc,symref,backslash,\
doc,spec/literal,hash,ハッシュ式
doc,symref,tilde,~
method,Kernel.#proc,orphan,orphan な手続きオブジェクトの挙動
doc,symref,rbra3,)
doc,spec/control,return,return
doc,spec/control,if,if
doc,spec/regexp,backtrack,バックトラック
doc,spec/lambda_proc,lambda_proc,lambda と proc と Proc.new とイテレータの違い
doc,spec/def,alias,alias
doc,symref,slash,/
doc,spec/control,next,next
doc,spec/operator,range_cond,条件式としての範囲式
doc,symref,dollar,$
doc,spec/thread,exception,例外発生時のスレッドの振る舞い
doc,spec/lexical,identifier,識別子
doc,spec/literal,command,コマンド出力
doc,symref,comma,\,
doc,symref,num,#
doc,spec/regexp,backref,後方参照
doc,symref,under,_
class,Proc,orphan,orphan な手続きオブジェクトの挙動
doc,spec/control,case,case
doc,spec/lambda_proc,should_use_next,手続きを中断して値を返す
doc,spec/def,defined,defined?
doc,spec/operator,or,or
doc,spec/variables,pseudo,疑似変数
method,Kernel.#lambda,orphan,orphan な手続きオブジェクトの挙動
doc,symref,or,|
class,Proc,should_use_next,手続きを中断して値を返す
doc,symref,rbra2,]
doc,spec/variables,prio,定数参照の優先順位
doc,spec/program,terminate,プログラムの終り
doc,spec/literal,symbol,シンボル
method,Kernel.#proc,block,Proc オブジェクトをブロック付きメソッド呼び出しに使う
doc,spec/rubycmd,cmd_option,コマンドラインオプション
class,Thread,exception,例外発生時のスレッドの振る舞い
doc,spec/lambda_proc,block,Proc オブジェクトをブロック付きメソッド呼び出しに使う
doc,spec/def,singleton_class,特異クラス定義
doc,spec/def,module,モジュール定義
doc,spec/regexp,sample,サンプル
doc,spec/variables,class_var_scope,クラス変数のスコープ
doc,spec/literal,string,文字列リテラル
method,Kernel.#lambda,lambda_proc,lambda と proc と Proc.new とイテレータの違い
doc,spec/safelevel,level4,レベル 4
doc,spec/def,class,クラス定義
doc,symref,ast,*
doc,spec/call,super,super
doc,spec/operator,multiassign,多重代入
doc,spec/program,exp,式
class,FileUtils,options,オプションの説明
doc,symref,q,?
doc,symref,ex,!
doc,symref,colon,:
doc,spec/control,while,while
doc,symref,semicolon,;
